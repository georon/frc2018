// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4252.FRC2018;

import org.usfirst.frc4252.FRC2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4252.FRC2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    
    public Joystick joystick1, joystick2 ;
    public JoystickButton joystickButton1, joystickButton2, joystickButton3;
    
    public static final int GAMEPAD1 = 0;
    public static final int GAMEPAD2 = 1;
    
    public static final int BUTN_A = 1;
    public static final int BUTN_B = 2;
    public static final int BUTN_X = 3;
    public static final int BUTN_Y = 4;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(GAMEPAD1);
        
        joystickButton3 = new JoystickButton(joystick1, BUTN_Y);
        joystickButton3.whileHeld(new ReverseMotor1Command());
        joystickButton2 = new JoystickButton(joystick1, BUTN_B);
        joystickButton2.whileHeld(new StopMotor1Command());
        joystickButton1 = new JoystickButton(joystick1, BUTN_A);
        joystickButton1.whileHeld(new RunMotor1Command());


        // SmartDashboard Buttons
        SmartDashboard.putData("DriveCommand", new DriveCommand());
        //SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        //SmartDashboard.putData("ButtonPressedCommand 3", new ButtonPressedCommand3());
        //SmartDashboard.putData("Command 1", new Command1());
        //SmartDashboard.putData("Command Group 1", new CommandGroup1());
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

